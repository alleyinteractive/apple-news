# Tell Travis to use new container-based infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Specify when Travis should build.
branches:
  only:
    - master

# Git clone depth.
git:
  depth: 1

matrix:
  include:
    - php: 5.6
      env: WP_VERSION=latest PHP_LINT=1
    - php: 7.0
      env: WP_VERSION=latest PHP_LINT=1
    - php: 7.1
      env: WP_VERSION=latest PHP_LINT=1
    - php: 7.2
      env: WP_VERSION=latest PHP_LINT=1 WP_PHPCS=1
    - php: 7.2
      env: WP_VERSION=nightly
  fast_finish: true
  allow_failures:
    - env: WP_VERSION=nightly

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  # Turn off Xdebug. See https://core.trac.wordpress.org/changeset/40138.
  - phpenv config-rm xdebug.ini || echo "Xdebug not available"

  - export PATH="$HOME/.composer/vendor/bin:$PATH"

  # Couple the PHPUnit version to the PHP version.
  - |
    case "$TRAVIS_PHP_VERSION" in
      7.*)
        echo "Using PHPUnit 6.1"
        composer global require "phpunit/phpunit=6.1.*"
        ;;
      *)
        echo "Using PHPUnit 4.8"
        composer global require "phpunit/phpunit=4.8.*"
        ;;
    esac

  - og_dir="$(pwd)"

  # Set up WordPress installation.
  - export WP_DEVELOP_DIR=/tmp/wordpress
  - export WP_TESTS_DIR=${WP_DEVELOP_DIR}/tests/phpunit
  - export WP_CORE_DIR=${WP_DEVELOP_DIR}/src/
  - mkdir -p $WP_DEVELOP_DIR

  # Use the Git mirror of WordPress.
  - |
    case "$WP_VERSION" in
      latest)
        curl -s http://api.wordpress.org/core/version-check/1.7/ > /tmp/wp-latest.json
        grep '[0-9]+\.[0-9]+(\.[0-9]+)?' /tmp/wp-latest.json
        LATEST_VERSION=$(grep -o '"version":"[^"]*' /tmp/wp-latest.json | sed 's/"version":"//')
        if [[ -z "$LATEST_VERSION" ]]; then
          echo "Latest WordPress version could not be found."
          exit 1
        fi
        git clone --depth=1 --branch="$LATEST_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
        ;;
      nightly)
        git clone --depth=1 --branch="master" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
        ;;
      *)
        git clone --depth=1 --branch="$WP_VERSION" git://develop.git.wordpress.org/ $WP_DEVELOP_DIR
        ;;
    esac

  # Set up WordPress configuration.
  - cd $WP_DEVELOP_DIR
  - echo $WP_DEVELOP_DIR
  - cp wp-tests-config-sample.php wp-tests-config.php
  - sed -i "s/youremptytestdbnamehere/wordpress_test/" wp-tests-config.php
  - sed -i "s/yourusernamehere/root/" wp-tests-config.php
  - sed -i "s/yourpasswordhere//" wp-tests-config.php
  - cat wp-tests-config.php

  # Create WordPress database.
  - mysql -e 'CREATE DATABASE wordpress_test;' -uroot

  # Install Composer dependencies.
  - cd $og_dir
  - composer install
  - export PATH=$PATH:${WP_CORE_DIR}wp-content/plugins/apple-news/vendor/bin/
  - phpenv rehash

  # For debugging.
  - which phpunit
  - phpunit --version
  - pwd

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    # Search for PHP syntax errors.
    #
    # Only need to run this once per PHP version.
    - if [[ "$PHP_LINT" == "1" ]]; then find . -type "f" -iname "*.php" -not -path "./vendor/*" | xargs -L "1" php -l; fi

    # WordPress Coding Standards.
    #
    # These are the same across PHP and WordPress, so we need to run them only once.
    #
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    - if [[ "$WP_PHPCS" == "1" ]]; then phpcs -v; fi

    # Test the plugin's unit tests
    - phpunit
    - phpunit -c multisite.xml

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
